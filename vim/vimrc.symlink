"if has('vim_starting')
"  if &compatible
"    set nocompatible               " Be iMproved
"  endif

  "set runtimepath+=~/.vim/bundle/neobundle.vim/
"endif
set nocompatible
"call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
"NeoBundleFetch 'Shougo/neobundle.vim'

"NeoBundle 'easymotion/vim-easymotion'
"NeoBundle 'ctrlpvim/ctrlp.vim'
"NeoBundle 'Shougo/unite.vim'
"NeoBundle 'tpope/vim-fugitive'
"NeoBundle 'bling/vim-airline'
"NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'mac' : 'make -f make_mac.mak',
\     'linux' : 'make',
\    },
\ }

"NeoBundle 'Shougo/neocomplete'

"NeoBundle 'Shougo/neosnippet'
"NeoBundle 'Shougo/neosnippet-snippets'


" You can specify revision/branch/tag.
"NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }

"call neobundle#end()
filetype plugin indent on
" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
"NeoBundleCheck

syntax on

"Colorscheme
set background=dark
colorscheme solarized

if has("gui_running")
  if has("gui_gtk2")
    set guifont=Menlo\ 13
  elseif has("gui_macvim")
    set guifont=Menlo\ Regular:h17
  elseif has("gui_win32")
    set guifont=Consolas:h11:cANSI
  endif
endif

"It makes pasting/yanking possible from/to system clipboard.
:set clipboard=unnamedplus

""""""""""""    General

let mapleader = ","

set nowrap        " don't wrap lines
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set backspace=2 " make backspace work like most other apps

set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set number        " always show line numbers
"Setting related to tab
set tabstop=4 shiftwidth=4 expandtab
set softtabstop=4 " makes the spaces feel like real tabs
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'

set showmatch     " set show matching parenthesis
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                    "    case-sensitive otherwise
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type

set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

set mouse=a

"save on losing focus
"au FocusLost * silent! wa
"This will save the file when you switch buffers, make it etc
set autowriteall

"Auto completion in file mode
"autocmd FileType php set omnifunc=phpcomplete#CompletePHP
 

"enable pastemode by f12
set pastetoggle=<F2>

"""""Key Binddings

source ~/.vim/vimrc/vimrc_keybindings

""""""PLUGINS""""""""
"for each plugin (if necessary) there is specific file including configuration
"and keybindings. This file located on ~/.vim/plugins/<plugin-name>
"first we need to check if that plugin exists, then we can source apropriate
"file. Inorder to check whether plugin exists or not we can check a main
"command.

"CtrlP
autocmd VimEnter * if exists(":CtrlP") | exe "source ~/.vim/plugins/ctrlp.vim" | endif

"Unite
autocmd VimEnter * if exists(":Unite") | exe "source ~/.vim/plugins/unite.vim" | endif

"Neocomplete
"if !exists("g:acp_enableAtStartup")
"    exe "source ~/.vim/plugins/neocomplete.vim"
"endif

"Neosnippet
if !exists("g:neosnippet#enable_snipmate_compatibility")
    exe "source ~/.vim/plugins/neosnippet.vim"
endif

"vim-session
autocmd VimEnter * if exists(":SaveSession") | exe "source ~/.vim/plugins/vim-session" | endif

"if exists(':SaveSession')
"    source ~/.vim/plugins/vim-session
"endif
    
"this function dosen't work
function! FileExists ()
   if filereadable("~/.vim/bundle/nerdtree/keybindings.vim")
       echo "SpecificFile exists"
   endif
endfunction
":call FileExists ()

"PHP Specific
" Stop the location list opening automatically
"let g:phpqa_open_loc = 0
" Set the codesniffer args
"let g:phpqa_codesniffer_args = "--standard=PSR1 -n"

"AutoSave
"let g:auto_save = 1  " enable AutoSave on Vim startup"



"""" NERDTree
"key map ctl-n
"map <C-n> :NERDTreeToggle<CR>
"map <leader>c :NERDTreeToggle<CR>

"Exit vim if the only window left open is nerdtree
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

"open NERDTree if there is no file specified
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"Solve odd characters
"let g:NERDTreeDirArrows=0


"change cursor shape in iterm in os x
"let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"let &t_EI = "\<Esc>]50;CursorShape=0\x7"

