set nocompatible

"Vundle Setup

filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

"My plugins
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'easymotion/vim-easymotion'

"these are required for snipmate
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
"here is snippet repo
Plugin 'honza/vim-snippets'
Plugin 'tpope/vim-fugitive'
Plugin 'myusuf3/numbers.vim'
"Show git sign on gutter"
Plugin 'airblade/vim-gitgutter'
Plugin 'scrooloose/nerdtree'
Plugin 'bling/vim-airline' 

call vundle#end()    
filetype plugin indent on

syntax on

"Colorscheme
set background=dark
colorscheme solarized

if has("gui_running")
  if has("gui_gtk2")
    set guifont=Menlo\ 13
  elseif has("gui_macvim")
    set guifont=Menlo\ Regular:h22
  elseif has("gui_win32")
    set guifont=Consolas:h11:cANSI
  endif
endif

"It makes pasting/yanking possible from/to system clipboard.
set clipboard^=unnamed,unnamedplus

""""""""""""    General

let mapleader = ","

set nowrap        " don't wrap lines
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set backspace=2 " make backspace work like most other apps

set autoindent    " always set autoindenting on
set smartindent
set copyindent    " copy the previous indentation on autoindenting

"Relative numbers while in insert mode. Absolute numbers while in insert 
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

"Setting related to tab
set tabstop=4 shiftwidth=4 expandtab
set softtabstop=4 " makes the spaces feel like real tabs
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'

"Search related conf also look ~/.vim/vimrc/search-keybindings.vim
set showmatch     " set show matching parenthesis
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
set nolazyredraw " don't redraw while executing macros
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type

set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

set scrolloff=7 "when jumping makes at least 7 lines from top and bottom
set mouse=a

"set ruler
"set statusline=2
"set statusline=%f "tail of the filename
"set statusline+=%7*\[%n]                                  "buffernr
"set statusline+=%1*\ %<%F\                                "File+path
"set statusline+=%2*\ %y\                                  "FileType
"set statusline+=%4*\ %{&ff}\                              "FileFormat(dos/unix..) 
"set statusline+=%8*\ %=\ row:%l/%L\ (%03p%%)\             "Rownumber/total (%)
"set statusline+=%9*\ col:%03c\                            "Colnr
"set statusline+=%0*\ \ %m%r%w\ %P\ \                      "Modified? Readonly?Top/bot.

"""""Key Binddings

source ~/.vim/vimrc/vimrc_keybindings
source ~/.vim/vimrc/search-keybindings.vim
source ~/.vim/vimrc/jump-keybindings.vim


""""""PLUGINS""""""""
"for each plugin (if necessary) there is specific file including configuration
"and keybindings. This file located on ~/.vim/plugins/<plugin-name>
"first we need to check if that plugin exists, then we can source apropriate
"file. Inorder to check whether plugin exists or not we can check a main
"command.
source ~/.vim/vimrc/plugins_keybindings.vim
"CtrlP

"Unite
autocmd VimEnter * if exists(":Unite") | exe "source ~/.vim/plugins/unite.vim" | endif

"Neocomplete
"if !exists("g:acp_enableAtStartup")
"    exe "source ~/.vim/plugins/neocomplete.vim"
"endif

"Neosnippet
"if !exists("g:neosnippet#enable_snipmate_compatibility")
"    exe "source ~/.vim/plugins/neosnippet.vim"
"endif

"vim-session
autocmd VimEnter * if exists(":SaveSession") | exe "source ~/.vim/plugins/vim-session" | endif

"if exists(':SaveSession')
"    source ~/.vim/plugins/vim-session
"endif
    
"this function dosen't work
function! FileExists ()
   if filereadable("~/.vim/bundle/nerdtree/keybindings.vim")
       echo "SpecificFile exists"
   endif
endfunction

"change cursor shape in iterm in os x
"let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"let &t_EI = "\<Esc>]50;CursorShape=0\x7"

function! s:SpaceToUnderscore()
    if !hasmapto('_', 'i')
		inoremap <Space> _
    else
		iunmap <Space>
	endif
endfunction
""""""""""""""""""" Save Session 
fu! SaveSess()
    if filereadable(getcwd() . '/.session.vim')
        execute 'mksession! ' . getcwd() . '/.session.vim'
    endif
endfunction

fu! RestoreSess()
if filereadable(getcwd() . '/.session.vim')
    execute 'so ' . getcwd() . '/.session.vim'
    "if bufexists(1)
    "    for l in range(1, bufnr('$'))
    "        if bufwinnr(l) == -1
    "            exec 'sbuffer ' . l
    "        endif
    "    endfor
    "endif
endif
syntax on
endfunction

autocmd VimLeave * call SaveSess()
autocmd VimEnter * call RestoreSess()
""""""""""""""""""
"it change cursor shape for insert mode inside tmux
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

"it highlight 81th character like so--------------------------------------------H---
highlight ColorColumn ctermbg=gray
call matchadd('ColorColumn', '\%81v', 100)
